doc = Document('/Users/nataliehennig/Desktop/annos.docx')
from docx import Document
from docx.shared import RGBColor
from docx import Document
from docx.shared import RGBColor
def match_highlight_color(cell_text):
document = Document()
run = document.add_paragraph().add_run(cell_text)
# Accessing the first character's highlight color
highlight_color = run.runs[0].font.highlight_color
# Setting the cell shading color based on the highlight color
if highlight_color is not None:
cell_shading_color = RGBColor(highlight_color.rgb[0], highlight_color.rgb[1], highlight_color.rgb[2])
return cell_shading_color
return None
# Example usage
doc = Document('/Users/nataliehennig/Desktop/annos.docx')
for table in doc.tables:
for row in table.rows:
for cell in row.cells:
cell_text = cell.text.strip()
cell_shading_color = match_highlight_color(cell_text)
if cell_shading_color is not None:
cell._element.get_or_add_tcPr().shd.color = cell_shading_color
doc.save('/Users/nataliehennig/Desktop/annos_new.docx')
from docx import Document
from docx.shared import RGBColor
def match_highlight_color(cell_text):
quit
reticulate::source_python('~/Documents/language-and-emotion/04_scripts/00_extract_annotations.py')
doc = Document('/Users/nataliehennig/Desktop/annos.docx')
for table in doc.tables:
for row in table.rows:
for cell in row.cells:
cell_text = cell.text.strip()
cell_shading_color = match_highlight_color(cell_text)
if cell_shading_color is not None:
cell._element.get_or_add_tcPr().shd.color = cell_shading_color
doc.save('/Users/nataliehennig/Desktop/annos_new.docx')
doc = Document('/Users/nataliehennig/Desktop/annos.docx')
for table in doc.tables:
for row in table.rows:
for cell in row.cells:
cell_text = cell.text.strip()
cell_shading_color = match_highlight_color(cell_text)
if cell_shading_color is not None:
cell._element.get_or_add_tcPr().shd.color = cell_shading_color
doc.save('/Users/nataliehennig/Desktop/annos_new.docx')
doc = Document('/Users/nataliehennig/Desktop/annos.docx')
for table in doc.tables:
for row in table.rows:
for cell in row.cells:
cell_text = cell.text.strip()
cell_shading_color = match_highlight_color(cell_text)
if cell_shading_color is not None:
cell._element.get_or_add_tcPr().shd.color = cell_shading_color
doc.save('/Users/nataliehennig/Desktop/annos_new.docx')
doc = Document('/Users/nataliehennig/Desktop/annos.docx')
for table in doc.tables:
for row in table.rows:
for cell in row.cells:
cell_text = cell.text.strip()
cell_shading_color = match_highlight_color(cell_text)
if cell_shading_color is not None:
cell._element.get_or_add_tcPr().shd.color = cell_shading_color
doc.save('output_document.docx')
from docx import Document
from docx.shared import RGBColor
def get_most_common_highlight_color(run):
color_counts = {}
for char in run.text:
if char.font.highlight_color is not None:
color = char.font.highlight_color.rgb
color_counts[color] = color_counts.get(color, 0) + 1
most_common_color = max(color_counts, key=color_counts.get, default=None)
return most_common_color
def match_highlight_color(cell_text):
document = Document()
run = document.add_paragraph().add_run(cell_text)
most_common_color = get_most_common_highlight_color(run)
if most_common_color is not None:
cell_shading_color = RGBColor(most_common_color[0], most_common_color[1], most_common_color[2])
return cell_shading_color
return None
doc = Document('/Users/nataliehennig/Desktop/annos.docx')
for table in doc.tables:
for row in table.rows:
for cell in row.cells:
cell_text = cell.text.strip()
cell_shading_color = match_highlight_color(cell_text)
if cell_shading_color is not None:
cell._element.get_or_add_tcPr().shd.color = cell_shading_color
doc.save('output_document.docx')
from docx import Document
from docx.shared import RGBColor
def get_most_common_highlight_color(cell):
color_counts = {}
for paragraph in cell.paragraphs:
for run in paragraph.runs:
for char in run.text:
if char.font.highlight_color is not None:
color = char.font.highlight_color.rgb
color_counts[color] = color_counts.get(color, 0) + 1
most_common_color = max(color_counts, key=color_counts.get, default=None)
return most_common_color
def match_highlight_color(cell_text):
document = Document()
cell = document.add_table(1, 1).cell(0, 0)
cell.paragraphs[0].add_run(cell_text)
most_common_color = get_most_common_highlight_color(cell)
if most_common_color is not None:
cell_shading_color = RGBColor(most_common_color[0], most_common_color[1], most_common_color[2])
return cell_shading_color
return None
doc = Document('/Users/nataliehennig/Desktop/annos.docx')
for table in doc.tables:
for row in table.rows:
for cell in row.cells:
cell_text = cell.text.strip()
cell_shading_color = match_highlight_color(cell_text)
if cell_shading_color is not None:
cell._element.get_or_add_tcPr().shd.color = cell_shading_color
doc.save('/Users/nataliehennig/Desktop/out_annos.docx')
from docx import Document
from docx.shared import RGBColor
def get_most_common_highlight_color(cell):
color_counts = {}
for paragraph in cell.paragraphs:
for run in paragraph.runs:
for char in run.text:
if hasattr(char, 'font') and char.font.highlight_color is not None:
color = char.font.highlight_color.rgb
color_counts[color] = color_counts.get(color, 0) + 1
most_common_color = max(color_counts, key=color_counts.get, default=None)
return most_common_color
def match_highlight_color(cell_text):
document = Document()
cell = document.add_table(1, 1).cell(0, 0)
cell.paragraphs[0].add_run(cell_text)
most_common_color = get_most_common_highlight_color(cell)
if most_common_color is not None:
cell_shading_color = RGBColor(most_common_color[0], most_common_color[1], most_common_color[2])
return cell_shading_color
return None
doc = Document('/Users/nataliehennig/Desktop/annos.docx')
for table in doc.tables:
for row in table.rows:
for cell in row.cells:
cell_text = cell.text.strip()
cell_shading_color = match_highlight_color(cell_text)
if cell_shading_color is not None:
cell._element.get_or_add_tcPr().shd.color = cell_shading_color
doc.save('/Users/nataliehennig/Desktop/1_out_annos.docx')
most_common_color = get_most_common_highlight_color(cell)
if most_common_color is not None:
print("Most Common Color:", most_common_color)
cell_shading_color = RGBColor(most_common_color[0], most_common_color[1], most_common_color[2])
return cell_shading_color
if most_common_color is not None:
if most_common_color is not None:
print("Most Common Color:", most_common_color)
cell_shading_color = RGBColor(most_common_color[0], most_common_color[1], most_common_color[2])
return cell_shading_color
if most_common_color is not None:
print("Most Common Color:", most_common_color)
cell_shading_color = RGBColor(most_common_color[0], most_common_color[1], most_common_color[2])
return cell_shading_color
from docx import Document
from docx.shared import RGBColor
def get_most_common_highlight_color(cell):
color_counts = {}
for paragraph in cell.paragraphs:
for run in paragraph.runs:
for char in run.text:
if hasattr(char, 'font') and char.font.highlight_color is not None:
color = char.font.highlight_color.rgb
color_counts[color] = color_counts.get(color, 0) + 1
most_common_color = max(color_counts, key=color_counts.get, default=None)
return most_common_color
def match_highlight_color(cell_text):
document = Document()
cell = document.add_table(1, 1).cell(0, 0)
cell.paragraphs[0].add_run(cell_text)
most_common_color = get_most_common_highlight_color(cell)
if most_common_color is not None:
print("Most Common Color:", most_common_color)
cell_shading_color = RGBColor(most_common_color[0], most_common_color[1], most_common_color[2])
return cell_shading_color
return None
doc = Document('/Users/nataliehennig/Desktop/1_out_annos.docx')
for table in doc.tables:
for row in table.rows:
for cell in row.cells:
cell_text = cell.text.strip()
cell_shading_color = match_highlight_color(cell_text)
if cell_shading_color is not None:
cell._element.get_or_add_tcPr().shd.color = cell_shading_color
doc.save('/Users/nataliehennig/Desktop/2_out_annos.docx')
if most_common_color is not None:
print("Most Common Color:", most_common_color)
most_common_color
View(get_most_common_highlight_color)
View(match_highlight_color)
View(most_common_color)
knitr::opts_chunk$set(echo = TRUE)
here::i_am("03_Rmd/Preprocessing.Rmd")
library(here)
library(dplyr)
library(reticulate)
library(quanteda)
library(quanteda.sentiment)
library(tidyr)
library(spacyr)
use_condaenv("thesis23")
load(here("01_data", "meco L2", "primary data","eye tracking data","joint_data_l2_trimmed.rda"))
eye_table <- joint.data %>% select(uniform_id, lang, itemid, ianum, ia, skip, nfix, refix, dur, firstrun.dur, firstrun.gopast, firstrun.gopast.sel, firstfix.dur)
eye_table <- eye_table %>% rename("participant_id" = "uniform_id", "textnr" = "itemid", "tokenindex" = "ianum", "token"="ia")
eye_table <- eye_table %>% group_by(textnr, participant_id) %>% arrange(tokenindex, .by_group = TRUE) %>% distinct()
spacy_initialize(condaenv = "thesis23")
py_config()
spacy_initialize(model = "en_core_web_sm", condaenv = "thesis23")
spacy_download_langmodel("en")
spacy_initialize(model = "en_core_web_sm", condaenv = "thesis23")
spacy_install()
spacy_initialize(model = "en_core_web_sm", condaenv = "thesis23")
spacy_install()
spacy_install()
spacy_initialize(condaenv = "thesis23")
conda --info
knitr::opts_chunk$set(echo = TRUE)
here::i_am("03_Rmd/Preprocessing.Rmd")
library(here)
library(dplyr)
library(reticulate)
library(quanteda)
library(quanteda.sentiment)
library(tidyr)
library(spacyr)
use_condaenv("thesis23")
knitr::opts_chunk$set(echo = TRUE)
here::i_am("03_Rmd/Preprocessing.Rmd")
library(here)
library(dplyr)
library(reticulate)
library(quanteda)
library(quanteda.sentiment)
library(tidyr)
library(spacyr)
use_condaenv("thesis23")
load(here("01_data", "meco L2", "primary data","eye tracking data","joint_data_l2_trimmed.rda"))
eye_table <- joint.data %>% select(uniform_id, lang, itemid, ianum, ia, skip, nfix, refix, dur, firstrun.dur, firstrun.gopast, firstrun.gopast.sel, firstfix.dur)
eye_table <- eye_table %>% rename("participant_id" = "uniform_id", "textnr" = "itemid", "tokenindex" = "ianum", "token"="ia")
eye_table <- eye_table %>% group_by(textnr, participant_id) %>% arrange(tokenindex, .by_group = TRUE) %>% distinct()
py_config()
conda_binary()
conda_list()
conda_binary(conda="thesis23")
knitr::opts_chunk$set(echo = TRUE)
here::i_am("03_Rmd/Preprocessing.Rmd")
library(here)
library(dplyr)
library(reticulate)
library(quanteda)
library(quanteda.sentiment)
library(tidyr)
library(spacyr)
use_condaenv("thesis23")
load(here("01_data", "meco L2", "primary data","eye tracking data","joint_data_l2_trimmed.rda"))
eye_table <- joint.data %>% select(uniform_id, lang, itemid, ianum, ia, skip, nfix, refix, dur, firstrun.dur, firstrun.gopast, firstrun.gopast.sel, firstfix.dur)
eye_table <- eye_table %>% rename("participant_id" = "uniform_id", "textnr" = "itemid", "tokenindex" = "ianum", "token"="ia")
eye_table <- eye_table %>% group_by(textnr, participant_id) %>% arrange(tokenindex, .by_group = TRUE) %>% distinct()
spacy_install()
spacy_install()
knitr::opts_chunk$set(echo = TRUE)
here::i_am("03_Rmd/Preprocessing.Rmd")
library(here)
library(dplyr)
library(reticulate)
library(quanteda)
library(quanteda.sentiment)
library(tidyr)
library(spacyr)
use_condaenv("thesis23")
py_list_packages()
py_install("spacyr", "./thesis23")
library(dplyr)
library(reticulate)
library(quanteda)
library(quanteda.sentiment)
library(tidyr)
library(spacyr)
use_condaenv("thesis23")
load(here("01_data", "meco L2", "primary data","eye tracking data","joint_data_l2_trimmed.rda"))
eye_table <- joint.data %>% select(uniform_id, lang, itemid, ianum, ia, skip, nfix, refix, dur, firstrun.dur, firstrun.gopast, firstrun.gopast.sel, firstfix.dur)
eye_table <- eye_table %>% rename("participant_id" = "uniform_id", "textnr" = "itemid", "tokenindex" = "ianum", "token"="ia")
eye_table <- eye_table %>% rename("participant_id" = "uniform_id", "textnr" = "itemid", "tokenindex" = "ianum", "token"="ia")
eye_table <- eye_table %>% group_by(textnr, participant_id) %>% arrange(tokenindex, .by_group = TRUE) %>% distinct()
spacy_install()
spacy_install(python_version = "3.10")
spacy_initialize()
spacy_uninstall()
spacy_install(conda = "./thesis23", python_version = "3.10")
spacy_install(conda = "thesis23", python_version = "3.10")
spacy_install(conda = "/thesis23", python_version = "3.10")
use_condaenv("thesis23")
spacy_install(conda = "./thesis23", python_version = "3.10")
use_condaenv("thesis23")
spacy_install(conda = "./thesis23", python_version = "3.10")
spacy_install(conda = "/Users/nataliehennig/Documents/language-and-emotion/thesis23", python_version = "3.10")
spacy_install(conda = "/Users/nataliehennig/Documents/language-and-emotion/thesis23", python_version = "3.10")
use_condaenv(thesis23)
use_condaenv("thesis23")
spacy_install(envname = "/Users/nataliehennig/Documents/language-and-emotion/thesis23", python_version = "3.10")
spacy_initialize()
spacy_install(envname = "/Users/nataliehennig/Documents/language-and-emotion/thesis23", python_version = "3.10")
spacy_initialize()
spacy_install(envname = "/Users/nataliehennig/Documents/language-and-emotion/thesis23", python_version = "3.10")
spacy_initialize(condaenv = "./thesis23")
spacy_initialize(condaenv = "/Users/nataliehennig/Documents/language-and-emotion/thesis23")
POS = spacy_parse(eye_table$token, tag=TRUE)
knitr::opts_chunk$set(echo = TRUE)
here::i_am("03_Rmd/Preprocessing.Rmd")
library(here)
here::i_am("03_Rmd/Preprocessing.Rmd")
library(here)
library(dplyr)
library(reticulate)
library(quanteda)
library(quanteda.sentiment)
library(tidyr)
library(spacyr)
use_condaenv("thesis23")
load(here("01_data", "meco L2", "primary data","eye tracking data","joint_data_l2_trimmed.rda"))
eye_table <- joint.data %>% select(uniform_id, lang, itemid, ianum, ia, skip, nfix, refix, dur, firstrun.dur, firstrun.gopast, firstrun.gopast.sel, firstfix.dur)
eye_table <- eye_table %>% rename("participant_id" = "uniform_id", "textnr" = "itemid", "tokenindex" = "ianum", "token"="ia")
spacy_install(envname = "/Users/nataliehennig/Documents/language-and-emotion/thesis23", python_version = "3.10")
spacy_initialize(condaenv = "./thesis23")
spacy_initialize(condaenv = "/Users/nataliehennig/Documents/language-and-emotion/thesis23")
POS = spacy_parse(eye_table$token, tag=TRUE)
View(eye_table)
View(POS)
